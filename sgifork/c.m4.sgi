
divert(-1)
define(ENDLAB, 5283) dnl
define(SH_MEM, 16384)
define(ANL_DEF_NSPINS, 200)
define(ANL_LOCK_TAKEN, 0x1)

define(PROCASSIGN,`
{
  unsigned tmp;

  tmp = $1;
  if (sysmp(MP_MUSTRUN,(Total_Proc - 1) - (tmp % Total_Proc)) == -1) {
    perror("sysmp");
    exit(1);
  }
}')

define(ROUNDROBINASSIGN, ` ' )
define(RANGEASSIGN, ` ' )

define(LOCKDEC, `ulock_t $1;')

define(LOCKINIT, `
{
  if( ($1=usnewlock(sc_handle))==NULL){
	perror("usnewlock");
	fprintf(stderr, "Error in lock $1 initialization.\n");
	exit(-1);
  }
  usinitlock($1);
}')
define(LOCK,`while(uscsetlock($1,ANL_DEF_NSPINS) == 0);')
define(UNLOCK,`usunsetlock($1);')

define(ALOCKDEC, `ulock_t $1[$2];')

define(ALOCKINIT, 
`{
  int counter;
  for(counter=0; counter<$2; counter++)
	{
	  if( ($1[counter]=usnewlock(sc_handle))==NULL){
		char str[256];
		sprintf(str,"$1[0x%x]=usnewlock(sc_handle)",counter);
		perror(str);
		exit(-1);
	  }
	  usinitlock($1[counter]);
	}
}')

define(ALOCK, ` LOCK( $1[$2] ) ' )
define(AUNLOCK, ` UNLOCK( $1[$2] ) ' )
define(AULOCK, ` UNLOCK( $1[$2] ) ' )

define(SLINIT, `LOCKINIT($1)' )

define(SEMINIT, `
{
  $1 = usnewsema (sc_handle, $2);
  if ($1 == NULL) {
    perror ("");
    fprintf (stderr, "Error in sync variable $1 creation.\n"); exit (-1);
  }
  if (usinitsema ($1, $2) == -1) {
    perror ("");
    fprintf (stderr, "Error in sync variable $1 initialization.\n"); exit (-1);
  }
}')
define(SPINLOCK, `LOCK($1)' )
define(RELEASELOCK, `UNLOCK($1)')

define(ENQUEUE, `
{
  if (uspsema ($1) == -1) {
    perror (""); fprintf (stderr, "Lock $1 failed.\n"); exit (-1); 
  }
}')
define(DEQUEUE, `{ usvsema ($1); }')

define(SYS_MONINIT, ` 
{
  int mon_dum1, mon_dum2;

  ifelse(eval($2 > 0),1, `
  for (mon_dum1 = 0; mon_dum1 < $3; mon_dum1++)
    for (mon_dum2 = 0; mon_dum2 < $2; mon_dum2++) {
      $1[mon_dum1].count[mon_dum2] = 0;
      SEMINIT($1[mon_dum1].queue[mon_dum2], 0)
    }' ,,)

  for (mon_dum1 = 0; mon_dum1 < $3; mon_dum1++) 
    SLINIT($1[mon_dum1].lock, 1)
}')
define(SYS_MENTER, `SPINLOCK($1[$2].lock);')
define(SYS_DELAY, `
{
  $1[$3].count[$2]++;
  RELEASELOCK($1[$3].lock)
  ENQUEUE($1[$3].queue[$2]);   
}')
define(SYS_CONTINUE, `
{
  if ($1[$3].count[$2]) {
    ($1[$3].count[$2])--;
    DEQUEUE($1[$3].queue[$2])   
  } else
    RELEASELOCK($1[$3].lock)   
  goto `L'ENDLAB;
`LGO'ENDLAB: ;
}')
define(SYS_MEXIT, `
{
  RELEASELOCK($1[$2].lock); `L'ENDLAB: ; 
  define(`ENDLAB', eval(ENDLAB+1))
}')

define(DECVAR, `
  struct $1TYP {                                                    
    ulock_t lock;
    ifelse(eval($2 > 0), 1, `int count[$2]; usema_t *queue[$2];',)
    $4                       
  } $1[$3];
')
    
define(CREATE, `
{
  int rc;

  fflush (stdout);
  fflush (stderr);
  rc = fork ();
  if (rc == 0)  {
    /* Fork passes all parent"s attached shared memory segments on to the child:
     * this means we don"t have to re-attach the segment for this new
     * process; it"s already there.
     */
    $1 (); exit (0);
  } else if (rc == -1) {
    perror(""); fprintf (stderr, "failure in create\n"); exit (-1);
  }
  sc_myid++;
}')

define(CREATE_LITE,`
{
  if (sproc($1,0) == -1) {
    perror("");
    fprintf(stderr,"sproc() failed on process %s","$1");
    exit(-1);
  }
}')

define(CLOCK, `
{
  if (gettimeofday (&sc_tp, (struct timezone *)0)) {
    perror (""); fprintf (stderr, "error in clock macro\n"); exit (-1); }
  $1 = (sc_tp.tv_sec & 0x7ff)*1000000 + sc_tp.tv_usec;
}')

define(MILICLOCK, `
{
  if (gettimeofday (&sc_tp, (struct timezone *)0)) {
    perror (""); fprintf (stderr, "error in clock macro\n"); exit (-1); }
  $1 = (sc_tp.tv_sec)*1000 + sc_tp.tv_usec / 1000;
}')
	
define(INCLUDES, `
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <ulocks.h>
#include <sys/signal.h>
#include <sys/file.h>
#include <sys/time.h>
#include <errno.h>
#include <sys/sysmp.h>
#include <sys/time.h>
#include <sys/prctl.h>
#include <malloc.h>
#ifndef w_coredump
#include <sys/wait.h>
#endif
')
define(MAIN_ENV, `
  INCLUDES
  int sc_myid = 0;
  usptr_t *sc_handle;
  struct timeval sc_tp;
  unsigned Total_Proc=0x1;
')
define(EXTERN_ENV, `
  INCLUDES
  extern void *anl_malloc();
  extern void anl_free();
  extern void anl_shmem_init();
  extern void anl_shmem_end();
  extern int sc_myid;
  extern usptr_t *sc_handle;
  extern struct timeval sc_tp;
  extern unsigned Total_Proc;
')

define(INITENV, `
{ 
  ifelse($2,,,`define(`SH_MEM',$2)')
  anl_shmem_init(SH_MEM);
  if( usconfig(CONF_INITSIZE,2097152) == -1 ){
        perror("usconfig(CONF_INITSIZE,2097152)");
        exit(-1);
  }
  if( usconfig(CONF_INITUSERS,64) == -1 ){
        perror("usconfig(CONF_INITUSERS,64)");
        exit(-1);
  }
  sc_handle = usinit (mktemp("/usr/tmp/lckXXXXXX"));
  if (sc_handle == NULL) {
    perror ("usinit for locks");
    exit (-1);
  }
  Total_Proc = sysmp(MP_NPROCS);
  fprintf(stderr,"Total_Proc = %d\n", Total_Proc);
}')
define(MAIN_INITENV, `INITENV($1,$2)')
define(MAIN_END, `{ anl_shmem_end(); exit (ifelse($1,,0,$1));}')

define(INITENV_LITE, `
{ 
  if( usconfig(CONF_INITSIZE,131072) == -1 ){
        perror("usconfig(CONF_INITSIZE,131072)");
        exit(-1);
  }
  if( usconfig(CONF_INITUSERS,32) == -1 ){
        perror("usconfig(CONF_INITUSERS,32)");
        exit(-1);
  }
  sc_handle = usinit (mktemp("/usr/tmp/lckXXXXXX"));
  if (sc_handle == NULL) {
    perror ("usinit for locks");
    exit (-1);
  }
  Total_Proc = sysmp(MP_NPROCS);
}')
define(MAIN_INITENV_LITE, `INITENV_LITE($1,$2)')
define(MAIN_END_LITE,`{ exit (ifelse($1,,0,$1));}')

define(LITE_MALLOC,`malloc($1);')
define(G_MALLOC, `anl_malloc ($1);')
define(NU_MALLOC, `anl_malloc ($1);')
define(G_FREE, `anl_free ($1);')
define(SET_HOME, `{}')

define(WAIT_FOR_END,`{ int i; for (i = 1; i <= $1; i++) wait (0); }')

define(INITID,`*(unsigned *)PRDA->usr_prda.fill = $1;')
define(GETID,`*(unsigned *)PRDA->usr_prda.fill')

define(GET_PID,
`{
  $1 = sc_myid;
}')
define(AUG_OFF, ` ')
define(AUG_ON, ` ')
define(ST_LOG, ` ')
define(ST_INFO_INIT, ` ')
divert(0)
divert(-1)
define(MENTER,
`{
  AUG_OFF
  ST_LOG(ST_MENTER, (int *)&($1[$2].lock));
  SYS_MENTER($1, $2)
  AUG_ON
}')
    
define(MEXIT,
`{
  AUG_OFF
  ST_LOG(ST_MEXIT, (int *)&($1[$2].lock));
  SYS_MEXIT($1, $2)
  AUG_ON
}')
    
define(DELAY,
`{
  AUG_OFF
  ST_LOG(ST_DELAY, (int *)&($1[$3].lock));
  SYS_DELAY($1, $2, $3)
  AUG_ON
}')

define(CONTINUE,
`{
  AUG_OFF
  ST_LOG(ST_CONTINUE, (int *)&($1[$3].lock));
  SYS_CONTINUE($1, $2, $3)
  AUG_ON
}')

define(MONINIT, 
`{
  AUG_OFF
  SYS_MONINIT($1, $2, $3)
  AUG_ON
}')

define(BARDEC,`barrier_t *$1;')
define(BARINIT,`{
	if (!($1 = new_barrier(sc_handle))) {
		char str[256];
		sprintf(str,"new_barrier((usptr_t *) 0x%08x",sc_handle);
		perror(str);
		exit(-1);
	}
	init_barrier($1);
}')
define(BARRIER,`barrier($1,$2);')

define(GSDEC, `DECVAR($1,1,1,`int sub;')')

define(GSINIT, 
`{
  AUG_OFF
  SYS_MONINIT($1,1,1)
  $1[0].sub = 0;
  ST_INFO_INIT($1, ST_GS_LOCK, &($1[0].lock) )
  ST_INFO_INIT($1, ST_GS_QUEUE, &($1[0].queue[0]) )
  ST_LOG(ST_GS_INIT, (int *)&($1[0].lock))
  AUG_ON
}')

define(GETSUB, 
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[0].lock);
  ST_LOG(ST_GS_ENTER, lockAddr)
  SYS_MENTER($1, 0);
  if ($1[0].sub <= $3) {
    $2 = $1[0].sub++;
    ST_LOG(ST_GS_EXIT, lockAddr)
  } else {
    $2 = -1;
    if ($1[0].count[0] < ($4 - 1)) {
      SYS_DELAY($1,0,0)
    } else {
      $1[0].sub = 0;
    }
    ST_LOG(ST_GS_EXIT_LAST, lockAddr)
    SYS_CONTINUE($1,0,0)
  }
  SYS_MEXIT($1,0)
  AUG_ON
}')

define(ADEC, `DECVAR($1,1,1,`int pgdone, pbdone;')')

define(AINIT, 
`{
  AUG_OFF
  SYS_MONINIT($1,1,1)
  $1[0].pgdone = $1[0].pbdone = 0;
  AUG_ON
}')

/* aSKFOR(name, 0success/1exhaust/-1prog_end/nprob_end, P, getProb, <reset>) */
define(ASKFOR, 
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[0].lock);
  ST_LOG(ST_AS_ENTER, lockAddr)
  SYS_MENTER($1,0)
  if (($1[0].pgdone == 0) && ($1[0].pbdone != 0)) {
    if ($1[0].count[0] < ($3 - 1)) {
      SYS_DELAY($1,0,0)
    }
    ST_LOG(ST_AS_PROBDONE, lockAddr)
  } else {
    $2 = -2;
    while (($1[0].pgdone == 0) && ($1[0].pbdone == 0)) {
      $4
      if ($2 == 0) {
	ST_LOG(ST_AS_GOTTASK, lockAddr)
        SYS_CONTINUE($1,0,0)
      } else {
        if ($1[0].count[0] == ($3 - 1)) {
          $1[0].pbdone = 1;
        } else {
          SYS_DELAY($1,0,0)
	  ST_LOG(ST_AS_WORKWAIT, lockAddr)
        }
      }
    }
  }
  if ($1[0].pgdone != 0) {
    $2 = -1;
    ST_LOG(ST_AS_PROGDONE, lockAddr)
    SYS_CONTINUE($1,0,0)
  } else {
    $2 = $1[0].pbdone;
    if ($1[0].count[0] == 0) {
      $5
      $1[0].pbdone = 0;
    }
    ST_LOG(ST_AS_RESET, lockAddr)
    SYS_CONTINUE($1,0,0)
  }
  SYS_MEXIT($1,0)
  AUG_ON
}')

define(PROBEND, 
`{
  AUG_OFF
  SYS_MENTER($1,0)
  $1[0].pbdone = $2;
  SYS_MEXIT($1,0)
  AUG_ON
}')

define(PROGEND, 
`{
  AUG_OFF
  SYS_MENTER($1,0)
  $1[0].pgdone = 1;
  MAIN_END
  SYS_CONTINUE($1,0,0)
  SYS_MEXIT($1,0)
  AUG_ON
}')

define(NLOCKDEC, `LOCKDEC($1,$2,$3)')
define(NLOCKINIT, `LOCKINIT($1)')
define(NLOCK, `LOCK($1)')
define(NUNLOCK, `UNLOCK($1)')


define(PAUSEDEC, `DECVAR($1,2,ifelse($2,,1,$2),int flag;)')

define(PAUSEINIT,
`{
  int p_dummy;
  AUG_OFF
  for (p_dummy = 0; (p_dummy < ifelse($2,,1,$2)); p_dummy++)
    $1[p_dummy].flag = 0;
  SYS_MONINIT($1,2,ifelse($2,,1,$2))
  AUG_ON
}')

define(CLEARPAUSE,
`{
  register int *lockAddr;

  AUG_OFF
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_EVENT_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($2,,0,$2))
  $1[ifelse($2,,0,$2)].flag = 0;
  SYS_CONTINUE($1,0,ifelse($2,,0,$2))
  SYS_MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_EVENT_EXIT, lockAddr)
  AUG_ON
}')

define(SETPAUSE,
`{
  register int *lockAddr;

  AUG_OFF
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_EVENT_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($2,,0,$2))
  $1[ifelse($2,,0,$2)].flag = 1;
  SYS_CONTINUE($1,0,ifelse($2,,0,$2))
  SYS_MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_EVENT_EXIT, lockAddr)
  AUG_ON
}')

define(EVENT,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_EVENT_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($2,,0,$2))
  if ($1[ifelse($2,,0,$2)].flag) {
    SYS_DELAY($1,0,ifelse($2,,0,$2))
  }
  $1[ifelse($2,,0,$2)].flag = 1;
  SYS_CONTINUE($1,1,ifelse($2,,0,$2))
  SYS_MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_EVENT_EXIT, lockAddr)
  AUG_ON
}')

define(WAITPAUSE,
`{
  register int *lockAddr;

  AUG_OFF
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_PAUSE_ENTER,lockAddr)
  SYS_MENTER($1,ifelse($2,,0,$2))
  if (!$1[ifelse($2,,0,$2)].flag) {
    SYS_DELAY($1,0,ifelse($2,,0,$2))
  }
  SYS_CONTINUE($1,0,ifelse($2,,0,$2))
  SYS_MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_PAUSE_EXIT,lockAddr)
  AUG_ON
}')

define(PAUSE,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($2,,0,$2)].lock);
  ST_LOG(ST_PAUSE_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($2,,0,$2))
  if (!$1[ifelse($2,,0,$2)].flag) {
    SYS_DELAY($1,1,ifelse($2,,0,$2))
  }
  $1[ifelse($2,,0,$2)].flag = 0;
  SYS_CONTINUE($1,0,ifelse($2,,0,$2))
  SYS_MEXIT($1,ifelse($2,,0,$2))
  ST_LOG(ST_PAUSE_EXIT, lockAddr )
  AUG_ON
}')

define(SRDEC, `DECVAR($1,2,ifelse($2,,1,$2),int flag;)')

define(SRINIT,
`{
  int s_dummy;
  AUG_OFF
  for (s_dummy = 0; (s_dummy < ifelse($2,,1,$2)); s_dummy++)
    $1[s_dummy].flag = 0;
  SYS_MONINIT($1,2,ifelse($2,,1,$2))
  AUG_ON
}')

define(SEND,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($3,,0,$3)].lock);
  ST_LOG(ST_SEND_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($3,,0,$3))
  if ($1[ifelse($3,,0,$3)].flag) {
    SYS_DELAY($1,0,ifelse($3,,0,$3))
  }
  $2
  $1[ifelse($3,,0,$3)].flag = 1;
  SYS_CONTINUE($1,1,ifelse($3,,0,$3))
  SYS_MEXIT($1,ifelse($3,,0,$3))
  ST_LOG(ST_SEND_EXIT, lockAddr)
  AUG_ON
}')

define(RECEIVE,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($3,,0,$3)].lock);
  ST_LOG(ST_RECEIVE_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($3,,0,$3))
  if (!$1[ifelse($3,,0,$3)].flag) {
    SYS_DELAY($1,1,ifelse($3,,0,$3))
  }
  $2
  $1[ifelse($3,,0,$3)].flag = 0;
  SYS_CONTINUE($1,0,ifelse($3,,0,$3))
  SYS_MEXIT($1,ifelse($3,,0,$3))
  ST_LOG(ST_RECEIVE_EXIT, lockAddr)
  AUG_ON
}')

define(HSEND,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($3,,0,$3)].lock);
  ST_LOG(ST_HSEND_ENTER, lockAddr)
  SYS_MENTER($1,ifelse($4,,0,$4))
  if ($1[ifelse($4,,0,$4)].flag) {
    SYS_DELAY($1,0,ifelse($4,,0,$4))
  }
  $3
  $1[ifelse($4,,0,$4)].flag = $2;
  SYS_CONTINUE($1,1,ifelse($4,,0,$4))
  SYS_MEXIT($1,ifelse($4,,0,$4))
  ST_LOG(ST_HSEND_EXIT, lockAddr)
  AUG_ON
}')

define(HRECEIVE,
`{
  register int *lockAddr;
  AUG_OFF
  lockAddr = (int *)&($1[ifelse($3,,0,$3)].lock);
  ST_LOG(ST_HRECEIVE_ENTER, lockAddr )
  SYS_MENTER($1,ifelse($4,,0,$4))
  while ((!($1[ifelse($4,,0,$4)].flag)) ||
               ($1[ifelse($4,,0,$4)].flag == $2)) {
    SYS_DELAY($1,1,ifelse($4,,0,$4))
  }
  $3
  $1[ifelse($4,,0,$4)].flag = 0;
  SYS_CONTINUE($1,0,ifelse($4,,0,$4))
  SYS_MEXIT($1,ifelse($4,,0,$4))
  ST_LOG(ST_HRECEIVE_EXIT, lockAddr ) 
  AUG_ON
}')

define(DYNMASK, `0xffff')

define(TASKDEC, `DECTVAR($1)')

define(TASKINIT,
`{
  AUG_OFF
  if (spy_gm->taskTblIndex < MAXTASKS) {
    (spy_gm->taskTbl[spy_gm->taskTblIndex]).name = "$1";
    $1[0].addr = (int *) (spy_gm->taskTblIndex << 16);
    ++(spy_gm->taskTblIndex);
  } else {
    fprintf(stderr,"Too many tasks\n"); exit(-2);
  }
  ST_LOG(ST_TASK_INIT, (char *) $1[0].addr)
  AUG_ON
}')

define(BEGINTASK,
`{
  AUG_OFF
  ST_LOG(ST_BEGINTASK, ((int) $1[0].addr | (($2) & DYNMASK)))
  AUG_ON
}')

define(ENDTASK,
`{
  AUG_OFF
  ST_LOG(ST_ENDTASK, ((int) $1[0].addr | (($2) & DYNMASK)))
  AUG_ON
}')

define(RESET_SYNC_TIMING, `')
define(PRINT_SYNC_TIME, `')
divert(0)





